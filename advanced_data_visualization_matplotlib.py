# -*- coding: utf-8 -*-
"""Advanced_Data_Visualization_Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uMLgI7xSf7NAlUyO2-nWY0LVziIEK1L0

# Melhorando sua visualização de dados

E aí como que criamos um plot?
Podemos consultar na documentação e copiar o código.
"""

import pandas as pd
import matplotlib.pyplot as plt
dados = {
'X': [1,2,3,4,5,6],
'Y': [120,110,130,145,118,125],
'Z': [95,54,86,77,90,81]
}
base = pd.DataFrame(dados)
base.head()

fig, ax = plt.subplots()
ax.plot(base.X,base.Y, label="Y")
plt.legend
plt.show()

"""Como podemos plotar 2 linhas nesse mesmo gráfico?"""

import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot(base.X,base.Y, label="Y")
ax.plot(base.X,base.Z, label="Z")
plt.legend
plt.show()

"""Como argumento do plt.subplots podemos passar o número de linhas e colunas que
queremos no nosso plot.
• plt.subplots(nrows= ,ncols= )
Nesse caso vamos precisar passar um índice para o ax (ax[0], ax[1])
"""

fig, ax = plt.subplots(nrows=2,ncols=1)
ax[0].plot(base.X,base.Y, label="Y")
ax[1].plot(base.X,base.Z, label="Z")
plt.legend()

"""Para melhorar o visual do nosso gráfico podemos:
• Aumentar o tamanho do gráfico usando o figsize=(x,y)
"""

fig, ax = plt.subplots(nrows=2,ncols=1,figsize=(15,7))
ax[0].plot(base.X, base.Y, label="Y")
ax[1].plot(base.X, base.Z, label="Z")
plt.legend()
plt.show()

"""Para melhorar o visual do nosso gráfico podemos:
• mudar a proporção dos gráficos, podemos usar o gridspec_kw={'height_ratios': []}
"""

fig, ax = plt.subplots(nrows=2,ncols=1,figsize=(15,7), gridspec_kw={'height_ratios': [1,2]})
ax[0].plot(base.X, base.Y, label="Y")
ax[1].plot(base.X, base.Z, label="Z")
plt.legend()
plt.show()

"""Para melhorar o visual do nosso gráfico podemos:
• Alterar o tipo de gráfico
"""

fig, ax = plt.subplots(nrows=2,ncols=1,figsize=(10,5), gridspec_kw={'height_ratios': [1,2]})
ax[0].plot(base.X, base.Y, label="Y")
ax[1].bar(base.X, base.Z, label="Z")
plt.legend()
plt.show()

"""***Atenção: ao trocar um tipo de gráfico, verifique os argumentos do gráfico.
Por exemplo, gráfico de linha não possui largura.***

Vamos ajustar o gráfico de barras ao lado para as colunas ficarem lado a lado.
"""

fig, ax = plt.subplots()
ax.bar(base.X,base.Y, label="Y")
ax.bar(base.X,base.Z, label="Z")
plt.legend()
plt.show()

"""Vamos ajustar as barras para ficarem lado a lado, para isso:
• Vamos definir a largura das barras (w)
"""

fig, ax = plt.subplots()
w=0.3
ax.bar(base.X,base.Y, label="Y", width=w)
ax.bar(base.X,base.Z, label="Z", width=w)
plt.legend()
plt.show()

"""Vamos ajustar as barras para ficarem lado a lado., para isso:
• Depois vamos deslocar o gráfico para os lados
"""

fig, ax = plt.subplots()
w=0.3
ax.bar(base.X+w/2,base.Y, label="Y", width=w)
ax.bar(base.X-w/2,base.Z, label="Z", width=w)
plt.legend()
plt.show()

"""Agora que já vimos como separar as barras e organizar melhor o nosso visual, vamos aprender a colocar o rótulo de dados utilizando a função annotate.
O annotate é utilizado para colocar qualquer texto. Como funciona essa função?

* A estrutura do annotate é:
"""

#.annotate("<Texto>",<posicao(x,y)>)

"""Vamos fazer o rótulo de dados passo a passo no nosso código do gráfico:"""

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma certa largura "w" deslocada para a direita
ax.bar(base.X + w/2, base.Y, label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X - w/2, base.Z, label="Z", width=w)

# Adiciona uma anotação "Texto" na posição (1,20) no gráfico
ax.annotate("Texto", (5, 80))

# Adiciona uma legenda ao gráfico
plt.legend()

# Exibe o gráfico
plt.show()

"""Para descobrir a posição do primeiro ponto laranja basta digitarmos o código:"""

base.Z

base.X

base.Y

#Posição centro do eixo laranja
base.X[0] -w/2

base.Z[0]

"""Vamos colocar exatamente esses dois pontos como posição X e Y na função annotate."""

#Substituindo os valores de X e Y pela posição do primeiro valor de Z no código:
fig, ax = plt.subplots()
w=0.3
ax.bar(base.X+w/2, base.Y, label="Y",width=w)
ax.bar(base.X-w/2, base.Z, label="Z",width=w)
ax.annotate(base.Z[0], (base.X[0]-w/2,base.Z[0]))
ax.annotate(base.Z[1], (base.X[1]-w/2,base.Z[1]))
ax.annotate(base.Z[2], (base.X[2]-w/2,base.Z[2]))
plt.legend()
plt.show()

"""Usando o for, é possível aplicar o annotate
para todas as barras.
"""

fig, ax = plt.subplots()
w=0.3
ax.bar(base.X+w/2, base.Y, label="Y",width=w)
ax.bar(base.X-w/2, base.Z, label="Z",width=w)
for i in range(len(base.X)):
    ax.annotate(base.Z[i],(base.X[i]-w/2,base.Z[i]))
    ax.annotate(base.Y[i],(base.X[i]+w/2,base.Y[i]))
plt.legend()
plt.show()

"""Por fim, vamos usar os parâmetros do annotate para melhorar a visualização:
ha → alinhamento horizontal xytext → deslocamento x,y do texto em relação a um referencial textcoords → referencial que vamos fazer o deslocamento acima
fontsize → tamanho da fonte fontweight → colocando em negrito
"""

# Importa a biblioteca matplotlib.pyplot para visualização de dados
import matplotlib.pyplot as plt

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma largura "w" deslocada para a direita
ax.bar(base.X + w/2, base.Y, label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X - w/2, base.Z, label="Z", width=w)

# Adiciona anotações (rótulos - valores de Z) acima das barras da série "Z"
for i in range(len(base.X)):
    ax.annotate(base.Z[i], (base.X[i] - w/2, base.Z[i]), ha="center")

# Adiciona anotações (rótulos - valores de Y) acima das barras da série "Y"
    ax.annotate(base.Y[i], (base.X[i] + w/2, base.Y[i]), ha="center")

# Adiciona uma legenda ao gráfico
plt.legend()

# Exibe o gráfico
plt.show()

"""Vamos utilizar o xytext para deslocar a posição:
Estrutura: xytext(x,y),textcoords=“offset points” ou “offset
pixels”
Aplicando o xytext na parte do annotate do nosso
código:
"""

# Importa a biblioteca matplotlib.pyplot para visualização de dados
import matplotlib.pyplot as plt

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma largura "w" deslocada para a direita
ax.bar(base.X + w/2, base.Y, label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X - w/2, base.Z, label="Z", width=w)

# Adiciona anotações (rótulos - valores de Z) acima das barras da série "Z"
for i in range(len(base.X)):
    # Adiciona o valor de Z acima da barra da série Z, com alinhamento central e deslocamento vertical (xytext)
    ax.annotate(base.Z[i], (base.X[i] - w/2, base.Z[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Adiciona anotações (rótulos - valores de Y) acima das barras da série "Y"
    # Adiciona o valor de Y acima da barra da série Y, com alinhamento central e deslocamento vertical (xytext)
    ax.annotate(base.Y[i], (base.X[i] + w/2, base.Y[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Adiciona uma legenda ao gráfico
plt.legend()

# Exibe o gráfico
plt.show()

"""Agora que colocamos o rótulo de dados, vamos melhorar essa visualização. Vamos ajustar o limite do eixo para 150 utilizando o código .set_yticks que vai permitir alterar o intervalo do eixo y. Estrutura:
ax.set_yticks([início,final])

Vamos aplicar o .set_yticks no nosso código:
"""

# Importa a biblioteca matplotlib.pyplot para visualização de dados
import matplotlib.pyplot as plt

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma largura "w" deslocada para a direita
ax.bar(base.X + w/2, base.Y, label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X - w/2, base.Z, label="Z", width=w)

# Adiciona anotações (rótulos - valores de Z) acima das barras da série "Z"
for i in range(len(base.X)):
    # Adiciona o valor de Z acima da barra da série Z, com alinhamento central, deslocamento vertical e coordenas de texto personalizadas
    ax.annotate(base.Z[i], (base.X[i] - w/2, base.Z[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Adiciona anotações (rótulos - valores de Y) acima das barras da série "Y"
    # Adiciona o valor de Y acima da barra da série Y, com alinhamento central, deslocamento vertical e coordenas de texto personalizadas
    ax.annotate(base.Y[i], (base.X[i] + w/2, base.Y[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Define os ticks no eixo y para apenas 0 e 170
ax.set_yticks([0, 170])

# Adiciona uma legenda ao gráfico
plt.legend()

# Exibe o gráfico
plt.show()

"""Já que estamos com todos os rótulos de dados, esse eixo y tona-se desnecessário. Para isso vamos utilizar a função .yaxis.set_visible. Estrutura:
ax.yaxis.set_visible(False)
"""

# Importa a biblioteca matplotlib.pyplot para visualização de dados
import matplotlib.pyplot as plt

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma largura "w" deslocada para a direita
ax.bar(base.X + w/2, base.Y, label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X - w/2, base.Z, label="Z", width=w)

# Adiciona anotações (rótulos - valores de Z) acima das barras da série "Z"
for i in range(len(base.X)):
    # Adiciona o valor de Z acima da barra da série Z, com alinhamento central, deslocamento vertical e coordenadas de texto personalizadas
    ax.annotate(base.Z[i], (base.X[i] - w/2, base.Z[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Adiciona anotações (rótulos - valores de Y) acima das barras da série "Y"
    # Adiciona o valor de Y acima da barra da série Y, com alinhamento central, deslocamento vertical e coordenadas de texto personalizadas
    ax.annotate(base.Y[i], (base.X[i] + w/2, base.Y[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Define os ticks no eixo y para apenas 0 e 170
ax.set_yticks([0, 170])

# Torna os ticks do eixo y invisíveis
ax.yaxis.set_visible(False)

# Adiciona uma legenda ao gráfico
plt.legend()

# Exibe o gráfico
plt.show()

"""Além disso, podemos retirar a borda do gráfico utilizando a função .spines[].set_visible. Estrutura:
ax.spines[].set_visible(False)

Posições:
• Right
• Top
• Left
• Bottom.


Vamos aplicar essa função no nosso código:
"""

# Importa a biblioteca matplotlib.pyplot para visualização de dados
import matplotlib.pyplot as plt

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma largura "w" deslocada para a direita
ax.bar(base.X + w/2, base.Y, label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X - w/2, base.Z, label="Z", width=w)

# Adiciona anotações (rótulos - valores de Z) acima das barras da série "Z"
for i in range(len(base.X)):
    # Adiciona o valor de Z acima da barra da série Z, com alinhamento central, deslocamento vertical e coordenadas de texto personalizadas
    ax.annotate(base.Z[i], (base.X[i] - w/2, base.Z[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Adiciona anotações (rótulos - valores de Y) acima das barras da série "Y"
    # Adiciona o valor de Y acima da barra da série Y, com alinhamento central, deslocamento vertical e coordenadas de texto personalizadas
    ax.annotate(base.Y[i], (base.X[i] + w/2, base.Y[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Define os ticks no eixo y para apenas 0 e 170
ax.set_yticks([0, 170])

# Torna os ticks do eixo y invisíveis
ax.yaxis.set_visible(False)

# Torna os traços das bordas superior, direita e esquerda do gráfico invisíveis
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)

# Adiciona uma legenda ao gráfico
plt.legend()

# Exibe o gráfico
plt.show()

"""Vamos supor que os valores 5 e 6 do gráfico são projetados e o seu chefe pediu para você diferenciá-los, mudando as cores das barras.

Cores: azul (#C6F0F5) e laranja (#FFC174).

Para isso vamos separar a nossa base em duas.
"""

# Importa a biblioteca matplotlib.pyplot para visualização de dados
import matplotlib.pyplot as plt

# Cria uma figura e eixos para o gráfico
fig, ax = plt.subplots()

# Define a largura das barras
w = 0.3

# Plota barras para a série de dados "Y" com uma largura "w" deslocada para a direita
ax.bar(base.X[0:4] + w/2, base.Y[0:4], label="Y", width=w)

# Plota barras para a série de dados "Z" com a mesma largura "w" deslocada para a esquerda
ax.bar(base.X[0:4] - w/2, base.Z[0:4], label="Z", width=w)

# Plota barras para a série de dados "Y" da segunda parte do dataset
ax.bar(base.X[4:6] + w/2, base.Y[4:6], width=w, color="#C6F0F5")

# Plota barras para a série de dados "Z" da segunda parte do dataset
ax.bar(base.X[4:6] - w/2, base.Z[4:6],  width=w, color="#FFC174")

# Adiciona anotações (rótulos - valores de Z) acima das barras da série "Z"
for i in range(len(base.X)):
    # Adiciona o valor de Z acima da barra da série Z, com alinhamento central, deslocamento vertical e coordenadas de texto personalizadas
    ax.annotate(base.Z[i], (base.X[i] - w/2, base.Z[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Adiciona anotações (rótulos - valores de Y) acima das barras da série "Y"
    # Adiciona o valor de Y acima da barra da série Y, com alinhamento central, deslocamento vertical e coordenadas de texto personalizadas
    ax.annotate(base.Y[i], (base.X[i] + w/2, base.Y[i]), ha="center", xytext=(0, 5), textcoords="offset points")

# Define os ticks no eixo y para apenas 0 e 170
ax.set_yticks([0, 170])

# Torna os ticks do eixo y invisíveis
ax.yaxis.set_visible(False)

# Torna os traços das bordas superior, direita e esquerda do gráfico invisíveis
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)

# Adiciona uma legenda ao gráfico com tamanho de fonte ainda menor (tamanho 8)
plt.legend(fontsize=8)

# Exibe o gráfico
plt.show()

"""EXTRA: Adicionando retângulos no gráfico para destacar áreas:"""

# Cria uma figura e eixos para o gráfico principal
fig, ax = plt.subplots()

# Adiciona um novo conjunto de eixos à figura, especificando as coordenadas (esquerda, inferior, largura, altura)
ax1 = fig.add_axes([0.5, 0.5, 0.4, 0.3])

# Obtém o objeto de patch (retângulo) dos eixos ax1, que representa a área do gráfico
rect = ax1.patch

# Define a cor de fundo do retângulo
rect.set_facecolor('#E0E6DE')

# Define a transparência do retângulo
rect.set_alpha(0.5)

# Exibe o gráfico
plt.show()

# Cria uma figura e eixos para o gráfico principal
fig, ax = plt.subplots()

# Adiciona um novo conjunto de eixos à figura, especificando as coordenadas (esquerda, inferior, largura, altura)
ax1 = fig.add_axes([0.5, 0.5, 0.4, 0.3])

# Obtém o objeto de patch (retângulo) dos eixos ax1, que representa a área do gráfico
rect = ax1.patch

# Define a cor de fundo do retângulo
rect.set_facecolor('#E0E6DE')

# Define a transparência do retângulo
rect.set_alpha(0.5)

# Torna os eixos x e y invisíveis no conjunto de eixos ax1
ax1.xaxis.set_visible(False)
ax1.yaxis.set_visible(False)

# Torna as bordas do conjunto de eixos ax1 invisíveis
ax1.spines['top'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['bottom'].set_visible(False)

# Exibe o gráfico
plt.show()

"""### Importando as bases e fazendo o primeiro gráfico"""

base = pd.read_excel("Visualização de dados no Python.xlsx")

base.head()

base

base.info()

# Plotagem dos dados
fig, ax = plt.subplots()  # Criando uma figura e eixos para o gráfico

# Plotando os dados no gráfico
ax.plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando os dados de Pedidos
ax.plot(base.Data, base.Entregas, label="Entregas - Antigo CD")  # Plotando os dados de Entregas - Antigo CD
ax.plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")  # Plotando os dados de Entregas - Novo CD
ax.plot(base.Data, base.TMAantigoCD, label="TMA Antigo CD")  # Plotando os dados de TMA Antigo CD
ax.plot(base.Data, base.TMAnovoCD, label="TMA Novo CD")  # Plotando os dados de TMA Novo CD

# Adicionando uma legenda ao gráfico
plt.legend()

# Exibindo o gráfico
plt.show()

"""### Separando em 2 gráficos:

1. Pedidos x Entregas (antigo e novo CD)
2. TMA (antigo e novo CD)

- `fig, ax = plt.subplots(nrows=2, ncols=1)`: Cria uma nova figura (`fig`) e dois subplots dispostos em 2 linhas e 1 coluna (`ax`). Isso significa que teremos dois plots empilhados verticalmente.
- `ax[0].plot(...)`: Plota os dados no primeiro subplot.
- `ax[1].plot(...)`: Plota os dados no segundo subplot.
- `ax[0].legend()`: Adiciona uma legenda ao primeiro subplot.
- `ax[1].legend()`: Adiciona uma legenda ao segundo subplot.
- `plt.show()`: Exibe os subplots na tela.
"""

import matplotlib.pyplot as plt

# Criando uma figura e subplots com 2 linhas e 1 coluna
fig, ax = plt.subplots(nrows=2, ncols=1)  # Quando passamos linhas e colunas, podemos determinar quantos plots vamos ter

## Pedidos x Entregas (antigo e novo CD) <- Primeiro plot
ax[0].plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando Pedidos
ax[0].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")  # Plotando Entregas - Antigo CD
ax[0].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")  # Plotando Entregas - Novo CD
ax[0].legend()  # Adicionando legenda ao primeiro plot

## TMA (antigo x novo CD) <- Segundo plot
ax[1].plot(base.Data, base.TMAantigoCD, label="TMA Antigo CD")  # Plotando TMA Antigo CD
ax[1].plot(base.Data, base.TMAnovoCD, label="TMA Novo CD")  # Plotando TMA Novo CD
ax[1].legend()  # Adicionando legenda ao segundo plot

plt.show()  # Exibindo os plots

"""### Melhorando a visualização

1. Podemos aumentar o tamanho dos gráficos.
2. Vamos alterar a ordem dos gráficos (colocar o de TMA por cima).
3. Vamos aumentar proporcionalmente o gráfico de Pedidos x Entregas em relação ao de TMA.

"""

import matplotlib.pyplot as plt

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(10, 7), gridspec_kw={'height_ratios': [1, 3]})
# 1. Aumentar o tamanho dos gráficos
# 3. Aumentar a proporção do gráfico de Pedidos x Entregas

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando Pedidos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")  # Plotando Entregas - Antigo CD
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")  # Plotando Entregas - Novo CD
ax[1].legend()  # Adicionando legenda ao primeiro plot
# 2. Alterar a ordem dos gráficos

## TMA (antigo x novo CD)
ax[0].plot(base.Data, base.TMAantigoCD, label="TMA Antigo CD")  # Plotando TMA Antigo CD
ax[0].plot(base.Data, base.TMAnovoCD, label="TMA Novo CD")  # Plotando TMA Novo CD
ax[0].legend()  # Adicionando legenda ao segundo plot

plt.show()  # Exibindo os plots

"""### Alterando o tipo de gráfico

- Vamos trocar o gráfico do TMA para gráfico de barras para facilitar a visualização.

"""

import matplotlib.pyplot as plt

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# 1. Aumentar o tamanho dos gráficos
# 3. Aumentar a proporção do gráfico de Pedidos x Entregas

## TMA (antigo x novo CD)
ax[0].bar(base.Data, base.TMAantigoCD, label="TMA Antigo CD")  # Plotando TMA Antigo CD em formato de barras
ax[0].bar(base.Data, base.TMAnovoCD, label="TMA Novo CD")  # Plotando TMA Novo CD em formato de barras
ax[0].legend()  # Adicionando legenda ao primeiro plot

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando Pedidos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")  # Plotando Entregas - Antigo CD
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")  # Plotando Entregas - Novo CD
ax[1].legend()  # Adicionando legenda ao segundo plot
# 2. Alterar a ordem dos gráficos

plt.show()  # Exibindo os plots

"""### Ajustando as barras para ficarem uma do lado da outra

1. Se tentarmos deslocar a barra usando datas, vamos aumentar a complexidade do nosso gráfico. Podemos apenas trocar o eixo x por um arange do numpy
"""

import matplotlib.pyplot as plt
import numpy as np

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# 1. Aumentar o tamanho dos gráficos
# 3. Aumentar a proporção do gráfico de Pedidos x Entregas

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)), base.TMAantigoCD, label="TMA Antigo CD")  # Plotando TMA Antigo CD em formato de barras
ax[0].bar(np.arange(len(base)), base.TMAnovoCD, label="TMA Novo CD")  # Plotando TMA Novo CD em formato de barras
ax[0].legend()  # Adicionando legenda ao primeiro plot

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando Pedidos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")  # Plotando Entregas - Antigo CD
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")  # Plotando Entregas - Novo CD
ax[1].legend()  # Adicionando legenda ao segundo plot
# 2. Alterar a ordem dos gráficos

plt.show()  # Exibindo os plots

"""#### 2. Agora podemos definir o width da coluna e deslocar as colunas em relação a esse width"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# 1. Aumentar o tamanho dos gráficos
# 3. Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # <- Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # <- Valores de Y
          width=wid,  # <- Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando Pedidos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()  # Adicionando legenda ao segundo plot
# 2. Alterar a ordem dos gráficos

plt.show()  # Exibindo os plots

"""#### 3. E podemos retirar o xaxis do primeiro gráfico pois a informação é a mesma do segundo gráfico"""

import matplotlib.pyplot as plt
import numpy as np

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# 1. Aumentar o tamanho dos gráficos
# 3. Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # Valores de Y
          width=wid,  # Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Plotando Pedidos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()  # Adicionando legenda ao segundo plot
# 2. Alterar a ordem dos gráficos

plt.show()  # Exibindo os plots

"""### Adicionando os rótulos de dados

- Para isso, vamos usar o annotate.
    - Nele, a gente precisa colocar ponto por ponto qual valor queremos colocar.
1. Primeiro vamos entender o annotate.
2. Depois vamos colocar apenas no gráfico de barras em todos os valores.
3. No gráfico de linhas, vamos selecionar quais pontos achamos que vale a pena mostrar os dados.
4. Depois vamos retirar o eixo y.

#### 1. Entendendo o annotate
"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# Aumentar o tamanho dos gráficos
# Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # Valores de Y
          width=wid,  # Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

# Usando o annotate para adicionar um rótulo de texto
ax[0].annotate("Teste", (2, 2))

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Alterar a ordem dos gráficos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()

plt.show()

"""#### 2. Colocando todos os valores no gráfico de barras"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# Aumentar o tamanho dos gráficos
# Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # Valores de Y
          width=wid,  # Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

# Usando o annotate para adicionar um rótulo de texto em cada barra
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAantigoCD[i]),  # Formatando o número
                   (i - wid/2, base.TMAantigoCD[i]),  # Posicionando o texto
                   ha="center",  # Alinhamento horizontal
                   xytext=(0, 3),  # Deslocamento x,y do texto
                   textcoords="offset points",  # Referencial que vamos fazer o deslocamento
                   fontsize=10,  # Tamanho da fonte
                   fontweight='bold'  # Deixando o texto em negrito
                   )

for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAnovoCD[i]),
                   (i + wid/2, base.TMAnovoCD[i]),
                   ha="center",
                   xytext=(0, 3),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold'
                   )

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Alterar a ordem dos gráficos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()

plt.show()

"""#### Aumentando o tamanho do eixo y para ajustar o gráfico e retirando os valores"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# Aumentar o tamanho dos gráficos
# Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # Valores de Y
          width=wid,  # Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

# Usando o annotate para adicionar um rótulo de texto em cada barra
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAantigoCD[i]),  # Formatando o número
                   (i - wid/2, base.TMAantigoCD[i]),  # Posicionando o texto
                   ha="center",  # Alinhamento horizontal
                   xytext=(0, 3),  # Deslocamento x,y do texto
                   textcoords="offset points",  # Referencial que vamos fazer o deslocamento
                   fontsize=10,  # Tamanho da fonte
                   fontweight='bold'  # Deixando o texto em negrito
                   )

for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAnovoCD[i]),
                   (i + wid/2, base.TMAnovoCD[i]),
                   ha="center",
                   xytext=(0, 3),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold'
                   )

# Configurando os eixos do primeiro subplot
ax[0].set_yticks(np.arange(0, 12))  # Definindo os ticks do eixo y
ax[0].yaxis.set_visible(False)  # Ocultando o eixo y

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(base.Data, base.Pedidos, label="Pedidos")  # Alterar a ordem dos gráficos
ax[1].plot(base.Data, base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(base.Data, base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()

plt.show()

"""#### 3. Adicionando labels nos gráficos de linha"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# Aumentar o tamanho dos gráficos
# Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # Valores de Y
          width=wid,  # Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

# Usando o annotate para adicionar um rótulo de texto em cada barra
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAantigoCD[i]),  # Formatando o número
                   (i - wid/2, base.TMAantigoCD[i]),  # Posicionando o texto
                   ha="center",  # Alinhamento horizontal
                   xytext=(0, 3),  # Deslocamento x,y do texto
                   textcoords="offset points",  # Referencial que vamos fazer o deslocamento
                   fontsize=10,  # Tamanho da fonte
                   fontweight='bold'  # Deixando o texto em negrito
                   )

for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAnovoCD[i]),
                   (i + wid/2, base.TMAnovoCD[i]),
                   ha="center",
                   xytext=(0, 3),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold'
                   )

# Configurando os eixos do primeiro subplot
ax[0].set_yticks(np.arange(0, 12))  # Definindo os ticks do eixo y
ax[0].yaxis.set_visible(False)  # Ocultando o eixo y

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(np.arange(len(base)), base.Pedidos, label="Pedidos")  # Alterar a ordem dos gráficos
ax[1].plot(np.arange(len(base)), base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(np.arange(len(base)), base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()

# Usando o annotate para adicionar rótulos de texto em pontos específicos
for i in np.arange(0, 12):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]),
                   (i, base.Pedidos[i]),
                   ha="right",
                   va="top",
                   xytext=(0, 15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="blue"
                   )

for i in np.arange(4, 12):
    ax[1].annotate('{:,.0f}'.format(base.Entregas[i]),
                   (i, base.Entregas[i]),
                   ha="left",
                   va="top",
                   xytext=(0, -15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="orange"
                   )

for i in np.arange(7, 12):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]),
                   (i, base.EntregaNovoCD[i]),
                   ha="left",
                   va="bottom",
                   xytext=(0, -15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="green"
                   )

# Configurando os eixos do segundo subplot
ax[1].xaxis.set_ticks(np.arange(0, 12))  # Definindo os ticks do eixo x
ax[1].set_xticklabels(np.datetime_as_string(base.Data.values, unit='D'))  # Definindo os rótulos do eixo x

plt.show()

"""#### 4. Retirando o eixo y"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, e configurando o tamanho da figura
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})
# Aumentar o tamanho dos gráficos
# Aumentar a proporção do gráfico de Pedidos x Entregas

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
ax[0].bar(np.arange(len(base)) - wid/2,  # Valores de X deslocados pela largura para a esquerda
          base.TMAantigoCD,  # Valores de Y
          width=wid,  # Nova largura da base
          label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2,
          base.TMAnovoCD,
          width=wid,
          label="TMA Novo CD")
ax[0].legend()
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

# Usando o annotate para adicionar um rótulo de texto em cada barra
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAantigoCD[i]),  # Formatando o número
                   (i - wid/2, base.TMAantigoCD[i]),  # Posicionando o texto
                   ha="center",  # Alinhamento horizontal
                   xytext=(0, 3),  # Deslocamento x,y do texto
                   textcoords="offset points",  # Referencial que vamos fazer o deslocamento
                   fontsize=10,  # Tamanho da fonte
                   fontweight='bold'  # Deixando o texto em negrito
                   )

for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAnovoCD[i]),
                   (i + wid/2, base.TMAnovoCD[i]),
                   ha="center",
                   xytext=(0, 3),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold'
                   )

# Configurando os eixos do primeiro subplot
ax[0].set_yticks(np.arange(0, 12))  # Definindo os ticks do eixo y
ax[0].yaxis.set_visible(False)  # Ocultando o eixo y

## Pedidos x Entregas (antigo e novo CD)
ax[1].plot(np.arange(len(base)), base.Pedidos, label="Pedidos")  # Alterar a ordem dos gráficos
ax[1].plot(np.arange(len(base)), base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(np.arange(len(base)), base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()

# Usando o annotate para adicionar rótulos de texto em pontos específicos
for i in np.arange(0, 9):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]),
                   (i, base.Pedidos[i]),
                   ha="right",
                   va="top",
                   xytext=(0, 15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="blue"
                   )

for i in np.arange(9, 12):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]),
                   (i, base.Pedidos[i]),
                   ha="left",
                   va="bottom",
                   xytext=(0, -15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="blue"
                   )

for i in np.arange(4, 12):
    ax[1].annotate('{:,.0f}'.format(base.Entregas[i]),
                   (i, base.Entregas[i]),
                   ha="left",
                   va="top",
                   xytext=(0, -15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="orange"
                   )

for i in np.arange(7, 9):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]),
                   (i, base.EntregaNovoCD[i]),
                   ha="left",
                   va="bottom",
                   xytext=(0, -15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="green"
                   )

for i in np.arange(9, 12):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]),
                   (i, base.EntregaNovoCD[i]),
                   ha="center",
                   va="top",
                   xytext=(0, 15),
                   textcoords="offset points",
                   fontsize=10,
                   fontweight='bold',
                   color="green"
                   )

# Configurando os eixos do segundo subplot
ax[1].xaxis.set_ticks(np.arange(0, 12))  # Definindo os ticks do eixo x
ax[1].set_xticklabels(np.datetime_as_string(base.Data.values, unit='D'))  # Definindo os rótulos do eixo x
ax[1].yaxis.set_visible(False)  # Ocultando o eixo y

# Exibindo o gráfico
plt.show()

"""### Retirando as bordas do gráfico"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, configurando o tamanho da figura e a proporção dos subplots
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
# Criando barras para o subplot 0 (primeiro subplot)
ax[0].bar(np.arange(len(base)) - wid/2, base.TMAantigoCD, width=wid, label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2, base.TMAnovoCD, width=wid, label="TMA Novo CD")
ax[0].legend()  # Adicionando a legenda
ax[0].xaxis.set_visible(False)  # Ocultando o eixo X do subplot 0

# Adicionando anotações para os valores das barras no subplot 0
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAantigoCD[i]), (i - wid/2, base.TMAantigoCD[i]), ha="center", xytext=(0, 3),
                   textcoords="offset points", fontsize=10, fontweight='bold')
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAnovoCD[i]), (i + wid/2, base.TMAnovoCD[i]), ha="center", xytext=(0, 3),
                   textcoords="offset points", fontsize=10, fontweight='bold')

# Configurando os eixos e removendo as bordas do subplot 0
ax[0].set_yticks(np.arange(0, 12))
ax[0].yaxis.set_visible(False)
ax[0].spines['top'].set_visible(False)
ax[0].spines['left'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].spines['bottom'].set_visible(False)

## Pedidos x Entregas (antigo e novo CD)
# Plotando as linhas no subplot 1 (segundo subplot)
ax[1].plot(np.arange(len(base)), base.Pedidos, label="Pedidos")
ax[1].plot(np.arange(len(base)), base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(np.arange(len(base)), base.EntregaNovoCD, label="Entregas - Novo CD")
ax[1].legend()  # Adicionando a legenda

# Adicionando anotações para os valores específicos no subplot 1
for i in np.arange(0, 9):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]), (i, base.Pedidos[i]), ha="right", va="top", xytext=(0, 15),
                   textcoords="offset points", fontsize=10, fontweight='bold', color="blue")
for i in np.arange(9, 12):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]), (i, base.Pedidos[i]), ha="left", va="bottom", xytext=(0, -15),
                   textcoords="offset points", fontsize=10, fontweight='bold', color="blue")
for i in np.arange(4, 12):
    ax[1].annotate('{:,.0f}'.format(base.Entregas[i]), (i, base.Entregas[i]), ha="left", va="top", xytext=(0, -15),
                   textcoords="offset points", fontsize=10, fontweight='bold', color="orange")
for i in np.arange(7, 9):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]), (i, base.EntregaNovoCD[i]), ha="left", va="bottom",
                   xytext=(0, -15), textcoords="offset points", fontsize=10, fontweight='bold', color="green")
for i in np.arange(9, 12):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]), (i, base.EntregaNovoCD[i]), ha="center", va="top",
                   xytext=(0, 15), textcoords="offset points", fontsize=10, fontweight='bold', color="green")

# Configurando os eixos e removendo as bordas do subplot 1
ax[1].xaxis.set_ticks(np.arange(0, 12))
ax[1].set_xticklabels(np.datetime_as_string(base.Data.values, unit='D'))
ax[1].yaxis.set_visible(False)
ax[1].spines['top'].set_visible(False)
ax[1].spines['left'].set_visible(False)
ax[1].spines['right'].set_visible(False)
# ax[1].spines['bottom'].set_visible(False)

# Exibindo o gráfico
plt.show()

"""### Colocando as legendas nos eixos

- Utilizando o "annotate".
"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, configurando o tamanho da figura e a proporção dos subplots
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})

# Definindo uma largura padrão para as colunas
wid = 0.5

## TMA (antigo x novo CD)
# Criando barras para o subplot 0 (primeiro subplot)
ax[0].bar(np.arange(len(base)) - wid/2, base.TMAantigoCD, width=wid, label="TMA Antigo CD")
ax[0].bar(np.arange(len(base)) + wid/2, base.TMAnovoCD, width=wid, label="TMA Novo CD")
ax[0].xaxis.set_visible(False)  # Ocultando o eixo X do subplot 0

# Adicionando anotações para os valores das barras no subplot 0
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAantigoCD[i]), (i - wid/2, base.TMAantigoCD[i]), ha="center", xytext=(0, 3),
                   textcoords="offset points", fontsize=10, fontweight='bold')
for i in np.arange(0, 12):
    ax[0].annotate('{:,.0f}'.format(base.TMAnovoCD[i]), (i + wid/2, base.TMAnovoCD[i]), ha="center", xytext=(0, 3),
                   textcoords="offset points", fontsize=10, fontweight='bold')

# Configurando os eixos e removendo as bordas do subplot 0
ax[0].set_yticks(np.arange(0, 12))
ax[0].yaxis.set_visible(False)
ax[0].spines['top'].set_visible(False)
ax[0].spines['left'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].spines['bottom'].set_visible(False)

# Usando o annotate para colocar as legendas na frente dos dados
ax[0].annotate("TMA Antigo CD", (11, base.TMAantigoCD[11]), ha="left", xytext=(8, -20), textcoords="offset points",
               fontsize=10, fontweight='bold', color="blue")
ax[0].annotate("TMA Novo CD", (11 + wid, base.TMAnovoCD[11]), ha="left", xytext=(8, -2), textcoords="offset points",
               fontsize=10, fontweight='bold', color="orange")

## Pedidos x Entregas (antigo e novo CD)
# Plotando as linhas no subplot 1 (segundo subplot)
ax[1].plot(np.arange(len(base)), base.Pedidos, label="Pedidos")
ax[1].plot(np.arange(len(base)), base.Entregas, label="Entregas - Antigo CD")
ax[1].plot(np.arange(len(base)), base.EntregaNovoCD, label="Entregas - Novo CD")

# Adicionando anotações para os valores específicos no subplot 1
for i in np.arange(0, 9):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]), (i, base.Pedidos[i]), ha="right", va="top", xytext=(0, 15),
                   textcoords="offset points", fontsize=10, fontweight='bold', color="blue")
for i in np.arange(9, 12):
    ax[1].annotate('{:,.0f}'.format(base.Pedidos[i]), (i, base.Pedidos[i]), ha="left", va="bottom", xytext=(0, -15),
                   textcoords="offset points", fontsize=10, fontweight='bold', color="blue")
for i in np.arange(4, 12):
    ax[1].annotate('{:,.0f}'.format(base.Entregas[i]), (i, base.Entregas[i]), ha="left", va="top", xytext=(0, -15),
                   textcoords="offset points", fontsize=10, fontweight='bold', color="orange")
for i in np.arange(7, 9):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]), (i, base.EntregaNovoCD[i]), ha="left", va="bottom",
                   xytext=(0, -15), textcoords="offset points", fontsize=10, fontweight='bold', color="green")
for i in np.arange(9, 12):
    ax[1].annotate('{:,.0f}'.format(base.EntregaNovoCD[i]), (i, base.EntregaNovoCD[i]), ha="center", va="top",
                   xytext=(0, 15), textcoords="offset points", fontsize=10, fontweight='bold', color="green")

# Configurando os eixos e removendo as bordas do subplot 1
ax[1].xaxis.set_ticks(np.arange(0, 12))
ax[1].set_xticklabels(np.datetime_as_string(base.Data.values, unit='D'))
ax[1].yaxis.set_visible(False)
ax[1].spines['top'].set_visible(False)
ax[1].spines['left'].set_visible(False)
ax[1].spines['right'].set_visible(False)
# ax[1].spines['bottom'].set_visible(False)

# Colocando a legenda na frente das retas
ax[1].annotate("Entregas - Novo CD", (11, base.EntregaNovoCD[11]), ha="left", va="center", xytext=(+15, 0),
               textcoords="offset points", fontsize=12, fontweight='bold', color="green")
ax[1].annotate("Entregas - Antigo CD", (11, base.Entregas[11]), ha="left", va="center", xytext=(+15, 0),
               textcoords="offset points", fontsize=12, fontweight='bold', color="orange")
ax[1].annotate("Pedidos", (11, base.Pedidos[11]), ha="left", va="center", xytext=(+15, +8),
               textcoords="offset points", fontsize=12, fontweight='bold', color="blue")

plt.show()

"""### ***Separando entre realizado x projetado***"""

# Criando uma figura e subplots com 2 linhas e 1 coluna, configurando o tamanho da figura e a proporção dos subplots
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})

# Definindo uma largura padrão para as colunas
wid = 0.4

## TMA (antigo x novo CD)
# Criando barras para o subplot 0 (primeiro subplot)
# Valores de X deslocados pela largura para a esquerda
ax[0].bar(
    np.arange(len(base))[:7] - wid/2,
    base.TMAantigoCD[:7],
    width=wid,  # Nova largura da base
    label="TMA Antigo CD",
    color="orange"
)
ax[0].bar(
    np.arange(len(base))[-6:] - wid/2,
    base.TMAantigoCD[-6:],
    width=wid,  # Nova largura da base
    label="TMA Antigo CD",
    color="#FFB973"
)
ax[0].bar(
    np.arange(len(base))[:7] + wid/2,
    base.TMAnovoCD[:7],
    width=wid,
    label="TMA Novo CD",
    color="green"
)
ax[0].bar(
    np.arange(len(base))[-6:] + wid/2,
    base.TMAnovoCD[-6:],
    width=wid,
    label="TMA Novo CD",
    color="#97FF73"
)
ax[0].xaxis.set_visible(False)  # Ocultando o eixo X do subplot 0

# Adicionando anotações para os valores das barras no subplot 0
for i in np.arange(0, 12):
    ax[0].annotate(
        '{:,.0f}'.format(base.TMAantigoCD[i]),
        (i - wid/2, base.TMAantigoCD[i]),
        ha="center",
        xytext=(0, 3),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold'
    )
for i in np.arange(0, 12):
    ax[0].annotate(
        '{:,.0f}'.format(base.TMAnovoCD[i]),
        (i + wid/2, base.TMAnovoCD[i]),
        ha="center",
        xytext=(0, 3),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold'
    )

# Configurando os eixos e removendo as bordas do subplot 0
ax[0].set_yticks(np.arange(0, 12))
ax[0].yaxis.set_visible(False)
ax[0].spines['top'].set_visible(False)
ax[0].spines['left'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].spines['bottom'].set_visible(False)

# Usando o annotate para colocar as legendas na frente dos dados
ax[0].annotate(
    "TMA Antigo CD",
    (11, base.TMAantigoCD[11]),
    ha="left",
    xytext=(8, -20),
    textcoords="offset points",
    fontsize=10,
    fontweight='bold',
    color="orange"
)
ax[0].annotate(
    "TMA Novo CD",
    (11 + wid, base.TMAnovoCD[11]),
    ha="left",
    xytext=(8, -2),
    textcoords="offset points",
    fontsize=10,
    fontweight='bold',
    color="green"
)

## Pedidos x Entregas (antigo e novo CD)
# Plotando as linhas no subplot 1 (segundo subplot)
ax[1].plot(np.arange(len(base))[:6], base.Pedidos[:6], color="blue")  # Alterar a ordem dos gráficos
ax[1].plot(np.arange(len(base))[-7:], base.Pedidos[-7:], "--", color="blue")
ax[1].plot(np.arange(len(base))[:6], base.Entregas[:6], color="orange")
ax[1].plot(np.arange(len(base))[-7:], base.Entregas[-7:], "--", color="orange")
# ax[1].plot(np.arange(len(base))[:6], base.EntregaNovoCD[:6], color="green")
ax[1].plot(np.arange(len(base))[-7:], base.EntregaNovoCD[-7:], "--", color="green")

# Adicionando anotações para os valores específicos no subplot 1
for i in np.arange(0, 9):
    ax[1].annotate(
        '{:,.0f}'.format(base.Pedidos[i]),
        (i, base.Pedidos[i]),
        ha="right",
        va="top",
        xytext=(0, 15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="blue"
    )
for i in np.arange(9, 12):
    ax[1].annotate(
        '{:,.0f}'.format(base.Pedidos[i]),
        (i, base.Pedidos[i]),
        ha="left",
        va="bottom",
        xytext=(0, -15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="blue"
    )
for i in np.arange(4, 12):
    ax[1].annotate(
        '{:,.0f}'.format(base.Entregas[i]),
        (i, base.Entregas[i]),
        ha="left",
        va="top",
        xytext=(0, -15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="orange"
    )
for i in np.arange(7, 9):
    ax[1].annotate(
        '{:,.0f}'.format(base.EntregaNovoCD[i]),
        (i, base.EntregaNovoCD[i]),
        ha="left",
        va="bottom",
        xytext=(0, -15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="green"
    )
for i in np.arange(9, 12):
    ax[1].annotate(
        '{:,.0f}'.format(base.EntregaNovoCD[i]),
        (i, base.EntregaNovoCD[i]),
        ha="center",
        va="top",
        xytext=(0, 15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="green"
    )

# Configurando os ticks do eixo X e os rótulos para datas no formato de string
ax[1].xaxis.set_ticks(np.arange(0, 12))
ax[1].set_xticklabels(np.datetime_as_string(base.Data.values, unit='D'))

# Ocultando o eixo Y do subplot 1 e removendo as bordas
ax[1].yaxis.set_visible(False)
ax[1].spines['top'].set_visible(False)
ax[1].spines['left'].set_visible(False)
ax[1].spines['right'].set_visible(False)
# ax[1].spines['bottom'].set_visible(False)

# Colocando as legendas na frente das retas
ax[1].annotate(
    "Entregas - Novo CD",
    (11, base.EntregaNovoCD[11]),
    ha="left",
    va="center",
    xytext=(+15, 0),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="green"
)
ax[1].annotate(
    "Entregas - Antigo CD",
    (11, base.Entregas[11]),
    ha="left",
    va="center",
    xytext=(+15, 0),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="orange"
)
ax[1].annotate(
    "Pedidos",
    (11, base.Pedidos[11]),
    ha="left",
    va="center",
    xytext=(+15, 8),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="blue"
)

# Exibindo o gráfico
plt.show()

"""### Destacando a área do projetado"""

# Importando a biblioteca matplotlib.pyplot
import matplotlib.pyplot as plt

# Criando a figura e os subplots
fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 9), gridspec_kw={'height_ratios': [1, 3]})

# Definindo uma largura padrão para as colunas
wid = 0.4

# Plotando os gráficos de barra para TMA (antigo x novo CD)
ax[0].bar(
    np.arange(len(base))[:7] - wid / 2,
    base.TMAantigoCD[:7],
    width=wid,
    label="TMA Antigo CD",
    color="orange"
)
ax[0].bar(
    np.arange(len(base))[-6:] - wid / 2,
    base.TMAantigoCD[-6:],
    width=wid,
    label="TMA Antigo CD",
    color="#FFB973"
)
ax[0].bar(
    np.arange(len(base))[:7] + wid / 2,
    base.TMAnovoCD[:7],
    width=wid,
    label="TMA Novo CD",
    color="green"
)
ax[0].bar(
    np.arange(len(base))[-6:] + wid / 2,
    base.TMAnovoCD[-6:],
    width=wid,
    label="TMA Novo CD",
    color="#97FF73"
)
ax[0].xaxis.set_visible(False)  # Retirando o eixo X do primeiro gráfico

# Usando o annotate para adicionar valores aos gráficos de barra
for i in np.arange(0, 12):
    ax[0].annotate(
        '{:,.0f}'.format(base.TMAantigoCD[i]),
        (i - wid / 2, base.TMAantigoCD[i]),
        ha="center",
        xytext=(0, 3),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold'
    )

for i in np.arange(0, 12):
    ax[0].annotate(
        '{:,.0f}'.format(base.TMAnovoCD[i]),
        (i + wid / 2, base.TMAnovoCD[i]),
        ha="center",
        xytext=(0, 3),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold'
    )

ax[0].set_yticks(np.arange(0, 12))
ax[0].yaxis.set_visible(False)
ax[0].spines['top'].set_visible(False)
ax[0].spines['left'].set_visible(False)
ax[0].spines['right'].set_visible(False)
ax[0].spines['bottom'].set_visible(False)

# Adicionando legendas na frente dos dados
ax[0].annotate(
    "TMA Antigo CD",
    (11, base.TMAantigoCD[11]),
    ha="left",
    xytext=(8, -20),
    textcoords="offset points",
    fontsize=10,
    fontweight='bold',
    color="orange"
)
ax[0].annotate(
    "TMA Novo CD",
    (11 + wid, base.TMAnovoCD[11]),
    ha="left",
    xytext=(8, -2),
    textcoords="offset points",
    fontsize=10,
    fontweight='bold',
    color="green"
)

# Plotando os gráficos de linhas para Pedidos x Entregas (antigo e novo CD)
ax[1].plot(np.arange(len(base))[:6], base.Pedidos[:6], color="blue")
ax[1].plot(np.arange(len(base))[-7:], base.Pedidos[-7:], "--", color="blue")
ax[1].plot(np.arange(len(base))[:6], base.Entregas[:6], color="orange")
ax[1].plot(np.arange(len(base))[-7:], base.Entregas[-7:], "--", color="orange")
ax[1].plot(np.arange(len(base))[-7:], base.EntregaNovoCD[-7:], "--", color="green")

# Usando o annotate para adicionar valores aos gráficos de linha
for i in np.arange(0, 9):
    ax[1].annotate(
        '{:,.0f}'.format(base.Pedidos[i]),
        (i, base.Pedidos[i]),
        ha="right",
        va="top",
        xytext=(0, +15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="blue"
    )

for i in np.arange(9, 12):
    ax[1].annotate(
        '{:,.0f}'.format(base.Pedidos[i]),
        (i, base.Pedidos[i]),
        ha="left",
        va="bottom",
        xytext=(0, -15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="blue"
    )

for i in np.arange(4, 12):
    ax[1].annotate(
        '{:,.0f}'.format(base.Entregas[i]),
        (i, base.Entregas[i]),
        ha="left",
        va="top",
        xytext=(0, -15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="orange"
    )

for i in np.arange(7, 9):
    ax[1].annotate(
        '{:,.0f}'.format(base.EntregaNovoCD[i]),
        (i, base.EntregaNovoCD[i]),
        ha="left",
        va="bottom",
        xytext=(0, -15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="green"
    )

for i in np.arange(9, 12):
    ax[1].annotate(
        '{:,.0f}'.format(base.EntregaNovoCD[i]),
        (i, base.EntregaNovoCD[i]),
        ha="center",
        va="top",
        xytext=(0, +15),
        textcoords="offset points",
        fontsize=10,
        fontweight='bold',
        color="green"
    )

ax[1].xaxis.set_ticks(np.arange(0, 12))
ax[1].set_xticklabels(np.datetime_as_string(base.Data.values, unit='D'))
ax[1].yaxis.set_visible(False)
ax[1].spines['top'].set_visible(False)
ax[1].spines['left'].set_visible(False)
ax[1].spines['right'].set_visible(False)

# Adicionando a legenda na frente das retas
ax[1].annotate(
    "Entregas - Novo CD",
    (11, base.EntregaNovoCD[11]),
    ha="left",
    va="center",
    xytext=(+15, 0),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="green"
)
ax[1].annotate(
    "Entregas - Antigo CD",
    (11, base.Entregas[11]),
    ha="left",
    va="center",
    xytext=(+15, 0),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="orange"
)
ax[1].annotate(
    "Pedidos",
    (11, base.Pedidos[11]),
    ha="left",
    va="center",
    xytext=(+15, +8),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="blue"
)

# Adicionando um novo subplot
ax1 = fig.add_axes([0.51, 0.125, 0.4, 0.755])
rect = ax1.patch
rect.set_edgecolor(None)
rect.set_facecolor('#E0E6DE')
rect.set_alpha(0.2)
ax1.xaxis.set_visible(False)
ax1.yaxis.set_visible(False)
ax1.spines['top'].set_visible(False)
ax1.spines['left'].set_visible(False)
ax1.spines['right'].set_visible(False)

# Adicionando um texto no novo subplot
ax[0].annotate(
    "PROJETADO",
    (9, 10),
    ha="center",
    va="center",
    xytext=(0, 0),
    textcoords="offset points",
    fontsize=12,
    fontweight='bold',
    color="gray"
)

# Exibindo o gráfico
plt.show()

"""111"""